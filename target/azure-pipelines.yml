variables:
  dockerCR: 'revcogacr.azurecr.io' # Blank for Docker Hub
  dockerImg: 'spring-hello-world'
  testKubeNS: 'revcog-test'
  prodKubeNS: 'revcog-prod'
  sonarCloudOrg: 'alexcavasso'
  sonarProjKey: 'alexcavasso_revcog-azonly'
  sonarProjName: 'revcog-azonly'

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: SonarCloudPrepare@1
  displayName: 'Prepare Sonar'
  inputs:
    SonarCloud: 'sonar-conn'
    organization: $(sonarCloudOrg)
    scannerMode: 'Other'
    extraProperties: |
      sonar.projectKey=$(sonarProjKey)
      sonar.projectName=$(sonarProjName)

- task: Gradle@2
  displayName: 'Gradle Build, Test, Sonar'
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    sonarQubeRunAnalysis: true
    sqGradlePluginVersionChoice: 'build'

- task: SonarCloudPublish@1
  displayName: 'Decorate with Quality Gate'
  inputs:
    pollingTimeoutSec: '300'

- task: Docker@2
  displayName: 'Docker Build'
  inputs:
    containerRegistry: 'docker-cr-conn'
    repository: $(dockerImg)
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(Build.BuildId)
      latest

- script: 'sudo curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sudo sh -s -- -b /usr/local/bin'
  displayName: 'Get trivy'

- script: 'trivy image --format template --template "@templates/junit.tpl" -o junit-report-trivy.xml $(dockerCR)/$(dockerImg):$(Build.BuildId)'
  displayName: 'Trivy scan'

- task: PublishTestResults@2
  displayName: 'Decorate with trivy'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit-report-trivy.xml'
    mergeTestResults: true
    testRunTitle: 'Trivy'

- task: Docker@2
  displayName: 'Docker Push'
  inputs:
    containerRegistry: 'docker-cr-conn'
    repository: $(dockerImg)
    command: 'push'
    tags: |
      $(Build.BuildId)
      latest

- task: Kubernetes@1
  displayName: 'Kube Apply (test)'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'kube-conn'
    namespace: $(testKubeNS)
    command: 'apply'
    arguments: '-f kube/'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Container Registry'
    dockerRegistryEndpoint: 'docker-cr-conn'

- task: Kubernetes@1
  displayName: 'Kube Apply (prod)'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'kube-conn'
    namespace: $(prodKubeNS)
    command: 'apply'
    arguments: '-f kube/'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Container Registry'
    dockerRegistryEndpoint: 'docker-cr-conn'
